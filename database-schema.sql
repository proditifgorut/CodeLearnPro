-- 1. Enable Row Level Security (RLS) for all tables
-- This is a security best practice.
alter default privileges in schema public enable row level security on tables;

-- 2. Create a table for public user profiles
-- This table will store data that is safe to be seen by other users.
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  website text,
  phone text,

  constraint full_name_length check (char_length(full_name) >= 2)
);

-- Set up Row Level Security (RLS) for the profiles table
alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( auth.uid() = id );

create policy "Users can update own profile."
  on profiles for update
  using ( auth.uid() = id );

-- This trigger automatically creates a profile entry when a new user signs up.
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url, phone)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url', new.raw_user_meta_data->>'phone');
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- 3. Create table for Courses
create table courses (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now(),
  title text not null,
  description text,
  image_url text,
  level text, -- e.g., 'Pemula', 'Menengah', 'Lanjutan'
  duration_weeks int,
  video_count int
);

-- RLS for courses
alter table courses enable row level security;
create policy "Courses are viewable by everyone." on courses for select using (true);
-- Add policies for insert/update/delete by admins if needed later

-- 4. Create table for Course Enrollments
create table enrollments (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete cascade not null,
  course_id bigint references courses on delete cascade not null,
  enrolled_at timestamp with time zone default now(),
  status text default 'ongoing', -- 'ongoing', 'completed'
  progress int default 0,
  unique (user_id, course_id)
);

-- RLS for enrollments
alter table enrollments enable row level security;
create policy "Users can view their own enrollments." on enrollments for select using (auth.uid() = user_id);
create policy "Users can insert their own enrollments." on enrollments for insert with check (auth.uid() = user_id);
create policy "Users can update their own enrollment progress." on enrollments for update using (auth.uid() = user_id);

-- 5. Create table for Certificates
create table certificates (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete cascade not null,
  course_id bigint references courses on delete cascade not null,
  issued_at timestamp with time zone default now(),
  certificate_url text not null,
  unique (user_id, course_id)
);

-- RLS for certificates
alter table certificates enable row level security;
create policy "Users can view their own certificates." on certificates for select using (auth.uid() = user_id);
-- Assuming certificates are created by a trusted function or admin role
create policy "Allow insert for service_role only" on certificates for insert with check (true);

-- Seed some initial course data
insert into courses (title, description, image_url, level, duration_weeks, video_count) values
('HTML & CSS Fundamental', 'Pelajari dasar-dasar web development dengan HTML dan CSS.', 'https://images.unsplash.com/photo-1593720213428-28a5b9e94613?w=400&h=250&fit=crop', 'Pemula', 4, 20),
('JavaScript ES6+ Modern', 'Kuasai JavaScript modern dengan ES6+ features.', 'https://images.unsplash.com/photo-1627398242454-45a1465c2479?w=400&h=250&fit=crop', 'Menengah', 6, 35),
('React.js Development', 'Bangun aplikasi web modern dengan React.js.', 'https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=400&h=250&fit=crop', 'Lanjutan', 8, 45),
('Backend Development', 'Pelajari Node.js, Express, dan database.', 'https://images.unsplash.com/photo-1555949963-aa79dcee981c?w=400&h=250&fit=crop', 'Lanjutan', 10, 50);

-- Set up storage for user avatars
insert into storage.buckets (id, name, public)
values ('avatars', 'avatars', true)
on conflict (id) do nothing;

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );

create policy "Anyone can update their own avatar."
  on storage.objects for update
  using ( auth.uid() = owner )
  with check ( bucket_id = 'avatars' );
